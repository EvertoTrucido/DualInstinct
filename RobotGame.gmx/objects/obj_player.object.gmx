<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canJump  = false;
grounded = false;
vsp      = 0;
hsp      = 3
grav     = 0.5;
canShoot = true;
jumpSpeed = 8.5;
life = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Key Checks
Key_Left  = keyboard_check(vk_left);
Key_Right = keyboard_check(vk_right);
Key_Up    = keyboard_check(vk_up);
Key_Down  = keyboard_check(vk_down);

direction = point_direction(x,y,mouse_x,mouse_y);     // Mouse Direction
pDirection = point_direction(x,y,xprevious,yprevious) // Player Direction

// If Standing Check Facing Direction
if ((Key_Right = false and Key_Left = false) or (Key_Right = true and Key_Left = true))
{
    if ((direction &lt;= 60 and direction &gt;= 0) or (direction &gt;= 300 and direction &lt;=360))
    {
        sprite_index = spr_facing
        image_xscale = 1;
    }
    
    if ((direction &gt; 60 and direction &lt; 120) or (direction &gt; 240 and direction &lt; 300))
    {
        sprite_index = spr_idle
    }

    if (direction &gt;= 120 and direction &lt;=240)
    {
        sprite_index = spr_facing
        image_xscale = -1;
    }
}

// If moving left, check for collision or move
if (Key_Left = true and Key_Right = false)
{   
    if(!place_meeting(x-hsp,y,par_wall))
    {
        if (place_meeting(x-hsp,y,par_wall))
        {
            while (!place_meeting(x-1,y,par_wall))
            {
                x-=1;
            }
        }
        else
        {
            x-=hsp;
            
            if ((direction &gt;= 90 and direction &lt;= 270))
            {
                sprite_index = spr_walking
                image_xscale = -1;
            }

            if ((direction &gt; 270) or (direction &lt;90))
            {
                sprite_index = spr_walkingback
                image_xscale = -1;
            }
        }
    }    
}

// check for collisions downward
if (place_meeting(x,y+vsp,par_wall))
{
    if (!place_meeting(x,y+sign(vsp),par_wall)) 
    {
        y+=sign(vsp);
    }
    if (place_meeting(x,y+1,par_wall))
    {
        canJump  = true;
        grounded = 0;
        grav     = 0;
    }
}

// If Moving Right, Check for collisions or move
if (Key_Right = true and Key_Left = false)
{
    if(!place_meeting(x+hsp,y,par_wall))
    {
        if (place_meeting(x+hsp,y,par_wall))
        {
            while (!place_meeting(x+1,y,par_wall))
            {
                x+=1;
            }
        }
        else
        {
            x+=hsp;
            
            if ((direction &gt;= 90 and direction &lt;= 270))
            {
                sprite_index = spr_walkingback
                image_xscale = 1;
            }

            if ((direction &gt; 270) or (direction &lt;90))
            {
                sprite_index = spr_walking
                image_xscale = 1;
            }
        }
    }    
}

if (place_meeting(x,y-vsp,par_wall))
{
    if (!place_meeting(x,y+sign(vsp),par_wall)) 
    {
        y+=sign(vsp);
    }
    if (place_meeting(x,y+1,par_wall))
    {
        canJump  = true;
        grounded = 0;
        grav     = 0;
    }
    
    vsp = 0;
}

if (!place_meeting(x,y+1,par_wall))
{
    grav = 0.5;
    grounded = 1;
}

if (Key_Up and canJump = true)
{   
    if(!place_meeting(x,y-16,par_wall) and grounded = 0)
    {
        canJump = false;
        vsp = jumpSpeed;
    }
}

vsp -= grav

y -= vsp;

    if sign(vsp) = 1
    {
        if ((direction &lt;= 60 and direction &gt;= 0) or (direction &gt;= 300 and direction &lt;=360))
        {
            sprite_index = spr_jumpingfacing
            image_xscale = 1;
        }
    
        if ((direction &gt; 60 and direction &lt; 120) or (direction &gt; 240 and direction &lt; 300))
        {
            sprite_index = spr_jumping
        }

        if (direction &gt;= 120 and direction &lt;=240)
        {
            sprite_index = spr_jumpingfacing
            image_xscale = -1;
        }    
    }
    
    else if sign(vsp) = -1
    {
        if ((direction &lt;= 60 and direction &gt;= 0) or (direction &gt;= 300 and direction &lt;=360))
        {
            sprite_index = spr_fallingfacing
            image_xscale = 1;
        }
    
        if ((direction &gt; 60 and direction &lt; 120) or (direction &gt; 240 and direction &lt; 300))
        {
            sprite_index = spr_falling
        }

        if (direction &gt;= 120 and direction &lt;=240)
        {
            sprite_index = spr_fallingfacing
            image_xscale = -1;
        }   
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Left_Click = mouse_check_button(mb_left)

if (Left_Click = true and canShoot = true)
{
    instance_create(x,y,obj_bluebullet);
    canShoot = false;
    alarm[0] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_redbullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (life &gt; 0)
{
    life--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
